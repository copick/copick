[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "copick"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
]
dynamic = ["version"]
dependencies = [
    "click>=8.1.8",
    "cryoet-data-portal>=4.4.1",
    "distinctipy>=1.3.4",
    "fsspec>=2025.5.1",
    "mrcfile>=1.5.4",
    "numcodecs<0.16.0",
    "numpy>=2.0.2",
    "ome-zarr>=0.10.2",
    "psutil>=7.0.0",
    "pydantic>=2",
    "s3fs>=2025.5.1",
    "scikit-image>=0.24.0",
    "textual>=3.5.0",
    "tqdm>=4.67.1",
    "trimesh>=4.6.12",
    "zarr<3",
    "sshfs>=2025.2.0",
]
authors = [
    { name = "Utz H. Ermel", email = "utz.ermel@czii.org" },
    { name = "Jonathan Schwartz", email = "jonathan.schwartz@czii.org" },
    { name = "Kyle I. S. Harrington", email = "kyle@kyleharrington.com" },
]
description = "Definitions for a collaborative cryoET annotation tool."
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["cryoet", "cryo-et", "tomography", "annotation", "segmentation", "collaborative", "copick"]

[project.urls]
Repository = "https://github.com/copick/copick.git"
Issues = "https://github.com/copick/copick/issues"
docs = "https://copick.github.io/copick/"
documentation = "https://copick.github.io/copick/"

[project.scripts]
copick = "copick.cli.cli:main"
make_templates = "copick.cli.make_templates:create [docs]"

[project.optional-dependencies]
smb = [
    "smbprotocol>=1.15.0",
]
all = [
    "smbprotocol>=1.15.0",
]
fledgeling = [
    "pooch>=1.8.2",
    "smbprotocol>=1.15.0",
]
test = [
    "pooch>=1.8.2",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "smbprotocol>=1.15.0",
]
dev = [
    "black>=25.1.0",
    "ipython>=8.18.1",
    "notebook>=7.4.3",
    "pre-commit>=4.2.0",
    "ruff>=0.12.0",
    "textual-dev>=1.7.0",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-autorefs>=1.4.2",
    "mkdocs-material>=9.6.14",
    "mkdocstrings[python]>=0.29.1",
]

[tool.hatch.version]
path = "src/copick/__init__.py"

[tool.hatch.metadata]
allow-direct-references = true

[tool.black]
line-length = 120
target_version = ['py311']

[tool.ruff]
line-length = 120
target-version = "py311"
exclude = [
    "mkdocs.yml",
]

[tool.ruff.lint]
select = [
    "E", "W",  # pycodestyle
    "F",       # pyflakes
    "B",       # bugbear
    "I",       # isort
    "N",       # pep8-naming
    "ASYNC",   # async
    "COM",     # commas
    "C4",      # comprehensions
    "DTZ",     # datetimez
    "ISC",     # implicit-str-concat
    "G",       # logging-format
    "T20",     # print
    "SIM",     # simplify
]
ignore = [
    "G004",   # logging format
    "W293",   # blank line contains whitespace
    "B008",   # Do not perform calls in argument defaults
    "B905",   # `zip()` without an explicit `strict=` parameter
    "N802",   # Function name should be lowercase
    "N805",   # First argument of a method should be named `self`
    "N806",   # Variable in function should be lowercase
    "N999",   # Invalid module name
    "E501",   # line too long
    "C408",   # rewrite empty built-ins as literals
    "T201",   # print statements.
    "DTZ007", # Datetime objects without timezones.
    "DTZ005", # More datetimes without timezones.
]

[tool.ruff.lint.isort]
known-first-party =["common"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

# https://docs.pytest.org/en/latest/reference/customize.html
[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@overload",
    "except ImportError",
    "pass",
]
